initialize() {
	
	if (!exists("N1"))
	   defineConstant("N1", 22552);
	if (!exists("N2"))
	   defineConstant("N2", 3313);

	if (!exists("T1"))
	   defineConstant("T1", 3589);
	if (!exists("T2"))
	   defineConstant("T2", 1050);

	  defineConstant("T_forward", 20);
          defineConstant("T_growth", T1-T2+T_forward);

	if (!exists("reco"))
           defineConstant("reco", 1.25e-8);
	if (!exists("L"))
	   defineConstant("L", 50000);

	if (!exists("growth"))
            defineConstant("growth", 0.00535241022770599);

	initializeTreeSeq();

	initializeMutationRate(0.); // !
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 20.0, "f", mut);	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(reco);

	defineConstant("simID", getSeed());
}

1 {
    sim.rescheduleScriptBlock(s1, start=T_forward, end=T_forward);

    // note: assumes mut_time happens before growth time (here T-1000 vs T-350)
    T_end=T1+T_forward;
    mut_time = T_end-1000;
    sim.rescheduleScriptBlock(s2, start=mut_time, end=mut_time);

    sim.rescheduleScriptBlock(s3, start=mut_time, end=T_end);
    sim.rescheduleScriptBlock(s4, start=T_end, end=T_end);

    sim.addSubpop("p1", N1);
}

// size change event
s1 1001 {
   p1.setSubpopulationSize(N2);
}

s2 1001 {
    pos = asInteger(L/2);
    sample(p1.genomes, 1).addNewDrawnMutation(m2, pos);
    sim.treeSeqOutput("/tmp/slim_"+simID+".trees");
}

// growth AND MUTATE CHECKING event
s3 1002 {

   // mut checking
   sweep = sim.mutationsOfType(m2);

   if (size(sweep) == 0)
   {
	if (any(sim.substitutions.mutationType == m2))
	{
	    // cat(simID + ": FIXED\n");
	}
	else
	{
	    cat(simID + ": LOST\n");
	    sim.readFromPopulationFile("/tmp/slim_" + simID + ".trees");
	}
    }
    else
    {
	freq = sim.mutationFrequencies(NULL, sweep);
    	catn(sim.generation + ": " + freq);
    }    

   // growth
   if (sim.generation >= T_growth)
   {
	t = sim.generation - T_growth;
	size = asInteger(N2 / exp(-growth * t));
   	p1.setSubpopulationSize(size);
   }
}

// "T0", end sim
s4 1003 late() {
   sim.treeSeqOutput(outfolder + prefix + "_" + i  +".trees");
}